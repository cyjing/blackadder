# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blackadder_py', [dirname(__file__)])
        except ImportError:
            import _blackadder_py
            return _blackadder_py
        if fp is not None:
            try:
                _mod = imp.load_module('_blackadder_py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blackadder_py = swig_import_helper()
    del swig_import_helper
else:
    import _blackadder_py
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def to_malloc_buffer(*args):
  return _blackadder_py.to_malloc_buffer(*args)
to_malloc_buffer = _blackadder_py.to_malloc_buffer

def new_malloc_buffer(*args):
  return _blackadder_py.new_malloc_buffer(*args)
new_malloc_buffer = _blackadder_py.new_malloc_buffer

def free_malloc_buffer(*args):
  return _blackadder_py.free_malloc_buffer(*args)
free_malloc_buffer = _blackadder_py.free_malloc_buffer
PURSUIT_ID_LEN = _blackadder_py.PURSUIT_ID_LEN
FID_LEN = _blackadder_py.FID_LEN
NODEID_LEN = _blackadder_py.NODEID_LEN
NODE_LOCAL = _blackadder_py.NODE_LOCAL
LINK_LOCAL = _blackadder_py.LINK_LOCAL
DOMAIN_LOCAL = _blackadder_py.DOMAIN_LOCAL
IMPLICIT_RENDEZVOUS = _blackadder_py.IMPLICIT_RENDEZVOUS
BROADCAST_IF = _blackadder_py.BROADCAST_IF
PUBLISH_SCOPE = _blackadder_py.PUBLISH_SCOPE
PUBLISH_INFO = _blackadder_py.PUBLISH_INFO
UNPUBLISH_SCOPE = _blackadder_py.UNPUBLISH_SCOPE
UNPUBLISH_INFO = _blackadder_py.UNPUBLISH_INFO
SUBSCRIBE_SCOPE = _blackadder_py.SUBSCRIBE_SCOPE
SUBSCRIBE_INFO = _blackadder_py.SUBSCRIBE_INFO
UNSUBSCRIBE_SCOPE = _blackadder_py.UNSUBSCRIBE_SCOPE
UNSUBSCRIBE_INFO = _blackadder_py.UNSUBSCRIBE_INFO
PUBLISH_DATA = _blackadder_py.PUBLISH_DATA
CONNECT = _blackadder_py.CONNECT
DISCONNECT = _blackadder_py.DISCONNECT
UNDEF_EVENT = _blackadder_py.UNDEF_EVENT
START_PUBLISH = _blackadder_py.START_PUBLISH
STOP_PUBLISH = _blackadder_py.STOP_PUBLISH
SCOPE_PUBLISHED = _blackadder_py.SCOPE_PUBLISHED
SCOPE_UNPUBLISHED = _blackadder_py.SCOPE_UNPUBLISHED
PUBLISHED_DATA = _blackadder_py.PUBLISHED_DATA
MATCH_PUB_SUBS = _blackadder_py.MATCH_PUB_SUBS
RV_RESPONSE = _blackadder_py.RV_RESPONSE
NETLINK_BADDER = _blackadder_py.NETLINK_BADDER
HAVE_USE_NETLINK = _blackadder_py.HAVE_USE_NETLINK

def hex_to_chararray(*args):
  return _blackadder_py.hex_to_chararray(*args)
hex_to_chararray = _blackadder_py.hex_to_chararray

def chararray_to_hex(*args):
  return _blackadder_py.chararray_to_hex(*args)
chararray_to_hex = _blackadder_py.chararray_to_hex
class Blackadder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Blackadder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Blackadder, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _blackadder_py.delete_Blackadder
    __del__ = lambda self : None;
    __swig_getmethods__["Instance"] = lambda x: _blackadder_py.Blackadder_Instance
    if _newclass:Instance = staticmethod(_blackadder_py.Blackadder_Instance)
    def publish_scope(self, *args): return _blackadder_py.Blackadder_publish_scope(self, *args)
    def publish_info(self, *args): return _blackadder_py.Blackadder_publish_info(self, *args)
    def unpublish_scope(self, *args): return _blackadder_py.Blackadder_unpublish_scope(self, *args)
    def unpublish_info(self, *args): return _blackadder_py.Blackadder_unpublish_info(self, *args)
    def subscribe_scope(self, *args): return _blackadder_py.Blackadder_subscribe_scope(self, *args)
    def subscribe_info(self, *args): return _blackadder_py.Blackadder_subscribe_info(self, *args)
    def unsubscribe_scope(self, *args): return _blackadder_py.Blackadder_unsubscribe_scope(self, *args)
    def unsubscribe_info(self, *args): return _blackadder_py.Blackadder_unsubscribe_info(self, *args)
    def publish_data(self, *args): return _blackadder_py.Blackadder_publish_data(self, *args)
    def getEvent(self, *args): return _blackadder_py.Blackadder_getEvent(self, *args)
    def disconnect(self): return _blackadder_py.Blackadder_disconnect(self)
Blackadder_swigregister = _blackadder_py.Blackadder_swigregister
Blackadder_swigregister(Blackadder)

def Blackadder_Instance(*args):
  return _blackadder_py.Blackadder_Instance(*args)
Blackadder_Instance = _blackadder_py.Blackadder_Instance

class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _blackadder_py.delete_Event
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _blackadder_py.new_Event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["type"] = _blackadder_py.Event_type_set
    __swig_getmethods__["type"] = _blackadder_py.Event_type_get
    if _newclass:type = _swig_property(_blackadder_py.Event_type_get, _blackadder_py.Event_type_set)
    __swig_setmethods__["id"] = _blackadder_py.Event_id_set
    __swig_getmethods__["id"] = _blackadder_py.Event_id_get
    if _newclass:id = _swig_property(_blackadder_py.Event_id_get, _blackadder_py.Event_id_set)
    __swig_setmethods__["data"] = _blackadder_py.Event_data_set
    __swig_getmethods__["data"] = _blackadder_py.Event_data_get
    if _newclass:data = _swig_property(_blackadder_py.Event_data_get, _blackadder_py.Event_data_set)
    __swig_setmethods__["data_len"] = _blackadder_py.Event_data_len_set
    __swig_getmethods__["data_len"] = _blackadder_py.Event_data_len_get
    if _newclass:data_len = _swig_property(_blackadder_py.Event_data_len_get, _blackadder_py.Event_data_len_set)
    __swig_setmethods__["buffer"] = _blackadder_py.Event_buffer_set
    __swig_getmethods__["buffer"] = _blackadder_py.Event_buffer_get
    if _newclass:buffer = _swig_property(_blackadder_py.Event_buffer_get, _blackadder_py.Event_buffer_set)
Event_swigregister = _blackadder_py.Event_swigregister
Event_swigregister(Event)

class nlmsghdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nlmsghdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nlmsghdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nlmsg_len"] = _blackadder_py.nlmsghdr_nlmsg_len_set
    __swig_getmethods__["nlmsg_len"] = _blackadder_py.nlmsghdr_nlmsg_len_get
    if _newclass:nlmsg_len = _swig_property(_blackadder_py.nlmsghdr_nlmsg_len_get, _blackadder_py.nlmsghdr_nlmsg_len_set)
    __swig_setmethods__["nlmsg_type"] = _blackadder_py.nlmsghdr_nlmsg_type_set
    __swig_getmethods__["nlmsg_type"] = _blackadder_py.nlmsghdr_nlmsg_type_get
    if _newclass:nlmsg_type = _swig_property(_blackadder_py.nlmsghdr_nlmsg_type_get, _blackadder_py.nlmsghdr_nlmsg_type_set)
    __swig_setmethods__["nlmsg_flags"] = _blackadder_py.nlmsghdr_nlmsg_flags_set
    __swig_getmethods__["nlmsg_flags"] = _blackadder_py.nlmsghdr_nlmsg_flags_get
    if _newclass:nlmsg_flags = _swig_property(_blackadder_py.nlmsghdr_nlmsg_flags_get, _blackadder_py.nlmsghdr_nlmsg_flags_set)
    __swig_setmethods__["nlmsg_seq"] = _blackadder_py.nlmsghdr_nlmsg_seq_set
    __swig_getmethods__["nlmsg_seq"] = _blackadder_py.nlmsghdr_nlmsg_seq_get
    if _newclass:nlmsg_seq = _swig_property(_blackadder_py.nlmsghdr_nlmsg_seq_get, _blackadder_py.nlmsghdr_nlmsg_seq_set)
    __swig_setmethods__["nlmsg_pid"] = _blackadder_py.nlmsghdr_nlmsg_pid_set
    __swig_getmethods__["nlmsg_pid"] = _blackadder_py.nlmsghdr_nlmsg_pid_get
    if _newclass:nlmsg_pid = _swig_property(_blackadder_py.nlmsghdr_nlmsg_pid_get, _blackadder_py.nlmsghdr_nlmsg_pid_set)
    def __init__(self): 
        this = _blackadder_py.new_nlmsghdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blackadder_py.delete_nlmsghdr
    __del__ = lambda self : None;
nlmsghdr_swigregister = _blackadder_py.nlmsghdr_swigregister
nlmsghdr_swigregister(nlmsghdr)

class NB_Blackadder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NB_Blackadder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NB_Blackadder, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _blackadder_py.delete_NB_Blackadder
    __del__ = lambda self : None;
    __swig_getmethods__["Instance"] = lambda x: _blackadder_py.NB_Blackadder_Instance
    if _newclass:Instance = staticmethod(_blackadder_py.NB_Blackadder_Instance)
    def publish_scope(self, *args): return _blackadder_py.NB_Blackadder_publish_scope(self, *args)
    def publish_info(self, *args): return _blackadder_py.NB_Blackadder_publish_info(self, *args)
    def unpublish_scope(self, *args): return _blackadder_py.NB_Blackadder_unpublish_scope(self, *args)
    def unpublish_info(self, *args): return _blackadder_py.NB_Blackadder_unpublish_info(self, *args)
    def subscribe_scope(self, *args): return _blackadder_py.NB_Blackadder_subscribe_scope(self, *args)
    def subscribe_info(self, *args): return _blackadder_py.NB_Blackadder_subscribe_info(self, *args)
    def unsubscribe_scope(self, *args): return _blackadder_py.NB_Blackadder_unsubscribe_scope(self, *args)
    def unsubscribe_info(self, *args): return _blackadder_py.NB_Blackadder_unsubscribe_info(self, *args)
    def publish_data(self, *args): return _blackadder_py.NB_Blackadder_publish_data(self, *args)
    def disconnect(self): return _blackadder_py.NB_Blackadder_disconnect(self)
    def setCallback(self, *args): return _blackadder_py.NB_Blackadder_setCallback(self, *args)
    __swig_getmethods__["selector"] = lambda x: _blackadder_py.NB_Blackadder_selector
    if _newclass:selector = staticmethod(_blackadder_py.NB_Blackadder_selector)
    __swig_getmethods__["worker"] = lambda x: _blackadder_py.NB_Blackadder_worker
    if _newclass:worker = staticmethod(_blackadder_py.NB_Blackadder_worker)
    __swig_getmethods__["signal_handler"] = lambda x: _blackadder_py.NB_Blackadder_signal_handler
    if _newclass:signal_handler = staticmethod(_blackadder_py.NB_Blackadder_signal_handler)
    def join(self): return _blackadder_py.NB_Blackadder_join(self)
    __swig_setmethods__["selector_thread"] = _blackadder_py.NB_Blackadder_selector_thread_set
    __swig_getmethods__["selector_thread"] = _blackadder_py.NB_Blackadder_selector_thread_get
    if _newclass:selector_thread = _swig_property(_blackadder_py.NB_Blackadder_selector_thread_get, _blackadder_py.NB_Blackadder_selector_thread_set)
    __swig_setmethods__["selector_mutex"] = _blackadder_py.NB_Blackadder_selector_mutex_set
    __swig_getmethods__["selector_mutex"] = _blackadder_py.NB_Blackadder_selector_mutex_get
    if _newclass:selector_mutex = _swig_property(_blackadder_py.NB_Blackadder_selector_mutex_get, _blackadder_py.NB_Blackadder_selector_mutex_set)
    __swig_setmethods__["queue_overflow_cond"] = _blackadder_py.NB_Blackadder_queue_overflow_cond_set
    __swig_getmethods__["queue_overflow_cond"] = _blackadder_py.NB_Blackadder_queue_overflow_cond_get
    if _newclass:queue_overflow_cond = _swig_property(_blackadder_py.NB_Blackadder_queue_overflow_cond_get, _blackadder_py.NB_Blackadder_queue_overflow_cond_set)
    __swig_setmethods__["worker_thread"] = _blackadder_py.NB_Blackadder_worker_thread_set
    __swig_getmethods__["worker_thread"] = _blackadder_py.NB_Blackadder_worker_thread_get
    if _newclass:worker_thread = _swig_property(_blackadder_py.NB_Blackadder_worker_thread_get, _blackadder_py.NB_Blackadder_worker_thread_set)
    __swig_setmethods__["worker_mutex"] = _blackadder_py.NB_Blackadder_worker_mutex_set
    __swig_getmethods__["worker_mutex"] = _blackadder_py.NB_Blackadder_worker_mutex_get
    if _newclass:worker_mutex = _swig_property(_blackadder_py.NB_Blackadder_worker_mutex_get, _blackadder_py.NB_Blackadder_worker_mutex_set)
    __swig_setmethods__["worker_cond"] = _blackadder_py.NB_Blackadder_worker_cond_set
    __swig_getmethods__["worker_cond"] = _blackadder_py.NB_Blackadder_worker_cond_get
    if _newclass:worker_cond = _swig_property(_blackadder_py.NB_Blackadder_worker_cond_get, _blackadder_py.NB_Blackadder_worker_cond_set)
    __swig_setmethods__["read_set"] = _blackadder_py.NB_Blackadder_read_set_set
    __swig_getmethods__["read_set"] = _blackadder_py.NB_Blackadder_read_set_get
    if _newclass:read_set = _swig_property(_blackadder_py.NB_Blackadder_read_set_get, _blackadder_py.NB_Blackadder_read_set_set)
    __swig_setmethods__["write_set"] = _blackadder_py.NB_Blackadder_write_set_set
    __swig_getmethods__["write_set"] = _blackadder_py.NB_Blackadder_write_set_get
    if _newclass:write_set = _swig_property(_blackadder_py.NB_Blackadder_write_set_get, _blackadder_py.NB_Blackadder_write_set_set)
    __swig_setmethods__["pipe_fds"] = _blackadder_py.NB_Blackadder_pipe_fds_set
    __swig_getmethods__["pipe_fds"] = _blackadder_py.NB_Blackadder_pipe_fds_get
    if _newclass:pipe_fds = _swig_property(_blackadder_py.NB_Blackadder_pipe_fds_get, _blackadder_py.NB_Blackadder_pipe_fds_set)
    __swig_setmethods__["sock_fd"] = _blackadder_py.NB_Blackadder_sock_fd_set
    __swig_getmethods__["sock_fd"] = _blackadder_py.NB_Blackadder_sock_fd_get
    if _newclass:sock_fd = _swig_property(_blackadder_py.NB_Blackadder_sock_fd_get, _blackadder_py.NB_Blackadder_sock_fd_set)
    __swig_setmethods__["output_queue"] = _blackadder_py.NB_Blackadder_output_queue_set
    __swig_getmethods__["output_queue"] = _blackadder_py.NB_Blackadder_output_queue_get
    if _newclass:output_queue = _swig_property(_blackadder_py.NB_Blackadder_output_queue_get, _blackadder_py.NB_Blackadder_output_queue_set)
    __swig_setmethods__["event_queue"] = _blackadder_py.NB_Blackadder_event_queue_set
    __swig_getmethods__["event_queue"] = _blackadder_py.NB_Blackadder_event_queue_get
    if _newclass:event_queue = _swig_property(_blackadder_py.NB_Blackadder_event_queue_get, _blackadder_py.NB_Blackadder_event_queue_set)
    __swig_setmethods__["pipe_buf"] = _blackadder_py.NB_Blackadder_pipe_buf_set
    __swig_getmethods__["pipe_buf"] = _blackadder_py.NB_Blackadder_pipe_buf_get
    if _newclass:pipe_buf = _swig_property(_blackadder_py.NB_Blackadder_pipe_buf_get, _blackadder_py.NB_Blackadder_pipe_buf_set)
    __swig_setmethods__["fake_buf"] = _blackadder_py.NB_Blackadder_fake_buf_set
    __swig_getmethods__["fake_buf"] = _blackadder_py.NB_Blackadder_fake_buf_get
    if _newclass:fake_buf = _swig_property(_blackadder_py.NB_Blackadder_fake_buf_get, _blackadder_py.NB_Blackadder_fake_buf_set)
    __swig_setmethods__["cf"] = _blackadder_py.NB_Blackadder_cf_set
    __swig_getmethods__["cf"] = _blackadder_py.NB_Blackadder_cf_get
    if _newclass:cf = _swig_property(_blackadder_py.NB_Blackadder_cf_get, _blackadder_py.NB_Blackadder_cf_set)
    def setPyCallback(self, *args): return _blackadder_py.NB_Blackadder_setPyCallback(self, *args)
    def testPyCallback(self, *args): return _blackadder_py.NB_Blackadder_testPyCallback(self, *args)
NB_Blackadder_swigregister = _blackadder_py.NB_Blackadder_swigregister
NB_Blackadder_swigregister(NB_Blackadder)

def NB_Blackadder_Instance(*args):
  return _blackadder_py.NB_Blackadder_Instance(*args)
NB_Blackadder_Instance = _blackadder_py.NB_Blackadder_Instance

def NB_Blackadder_selector(*args):
  return _blackadder_py.NB_Blackadder_selector(*args)
NB_Blackadder_selector = _blackadder_py.NB_Blackadder_selector

def NB_Blackadder_worker(*args):
  return _blackadder_py.NB_Blackadder_worker(*args)
NB_Blackadder_worker = _blackadder_py.NB_Blackadder_worker

def NB_Blackadder_signal_handler(*args):
  return _blackadder_py.NB_Blackadder_signal_handler(*args)
NB_Blackadder_signal_handler = _blackadder_py.NB_Blackadder_signal_handler
cvar = _blackadder_py.cvar

class Bitvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bitvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bitvector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _blackadder_py.new_Bitvector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blackadder_py.delete_Bitvector
    __del__ = lambda self : None;
    def size(self): return _blackadder_py.Bitvector_size(self)
    def zero(self): return _blackadder_py.Bitvector_zero(self)
    def clear(self): return _blackadder_py.Bitvector_clear(self)
    def resize(self, *args): return _blackadder_py.Bitvector_resize(self, *args)
    def assign(self, *args): return _blackadder_py.Bitvector_assign(self, *args)
    def negate(self): return _blackadder_py.Bitvector_negate(self)
    def offset_or(self, *args): return _blackadder_py.Bitvector_offset_or(self, *args)
    def or_with_difference(self, *args): return _blackadder_py.Bitvector_or_with_difference(self, *args)
    def nonzero_intersection(self, *args): return _blackadder_py.Bitvector_nonzero_intersection(self, *args)
    def swap(self, *args): return _blackadder_py.Bitvector_swap(self, *args)
    data_word_bits = _blackadder_py.Bitvector_data_word_bits
    def max_word(self): return _blackadder_py.Bitvector_max_word(self)
    def data_words(self): return _blackadder_py.Bitvector_data_words(self)
    def to_string(self): return _blackadder_py.Bitvector_to_string(self)
    MAX_INLINE_BIT = _blackadder_py.Bitvector_MAX_INLINE_BIT
    MAX_INLINE_WORD = _blackadder_py.Bitvector_MAX_INLINE_WORD
    __swig_setmethods__["_max"] = _blackadder_py.Bitvector__max_set
    __swig_getmethods__["_max"] = _blackadder_py.Bitvector__max_get
    if _newclass:_max = _swig_property(_blackadder_py.Bitvector__max_get, _blackadder_py.Bitvector__max_set)
    __swig_setmethods__["_data"] = _blackadder_py.Bitvector__data_set
    __swig_getmethods__["_data"] = _blackadder_py.Bitvector__data_get
    if _newclass:_data = _swig_property(_blackadder_py.Bitvector__data_get, _blackadder_py.Bitvector__data_set)
    __swig_setmethods__["_f0"] = _blackadder_py.Bitvector__f0_set
    __swig_getmethods__["_f0"] = _blackadder_py.Bitvector__f0_get
    if _newclass:_f0 = _swig_property(_blackadder_py.Bitvector__f0_get, _blackadder_py.Bitvector__f0_set)
    __swig_setmethods__["_f1"] = _blackadder_py.Bitvector__f1_set
    __swig_getmethods__["_f1"] = _blackadder_py.Bitvector__f1_get
    if _newclass:_f1 = _swig_property(_blackadder_py.Bitvector__f1_get, _blackadder_py.Bitvector__f1_set)
    def finish_copy_constructor(self, *args): return _blackadder_py.Bitvector_finish_copy_constructor(self, *args)
    def clear_last(self): return _blackadder_py.Bitvector_clear_last(self)
    def resize_to_max(self, *args): return _blackadder_py.Bitvector_resize_to_max(self, *args)
    def __len__(self): return _blackadder_py.Bitvector___len__(self)
    def __str__(self): return _blackadder_py.Bitvector___str__(self)
    def __getitem__(self, *args): return _blackadder_py.Bitvector___getitem__(self, *args)
    def __setitem__(self, *args): return _blackadder_py.Bitvector___setitem__(self, *args)
    def as_bytes(self): return _blackadder_py.Bitvector_as_bytes(self)
Bitvector_swigregister = _blackadder_py.Bitvector_swigregister
Bitvector_swigregister(Bitvector)


def rwbuffer(*args):
  return _blackadder_py.rwbuffer(*args)
rwbuffer = _blackadder_py.rwbuffer


